import{Game}from"./game.mjs";import{Matrix2D,sampleShaders}from"./gfx.mjs";const game=new Game("canvas"),gfx=game.gfx;game.preventDefaultKeyBehaviours({all:!0}).autoFillParent(!0);const prog1=gfx.createProgram("\n    out vec2 vUV;\n    uniform mat3 uTransform;\n    void main() {\n        int bits = gl_VertexID % 3 + gl_VertexID / 3;\n        vec2 v = vec2(bits >> 1 & 1, bits & 1);\n        vUV = v;\n        gl_Position = vec4((uTransform * vec3(v * 2. - 1., 1)).xy, 0, 1);\n    }","\n    out vec4 fragColor;\n    void main() {\n        fragColor = vec4(0, 1, 0, 1);\n    }"),prog2=gfx.createProgram(sampleShaders.vertex.yFlippedFullscreenNoBuffer,sampleShaders.fragment.passThrough),renderTexture=gfx.createTexture("2d","dynamic","rgba8",{autoMipmap:!1},{filter:"nearest",mipmap:0,wrap:"clamp"}),screen=gfx.createScreen(renderTexture);gfx.setTextureSlot(0,renderTexture),game.on("tick",(e=>{gfx.useProgram(prog1).useScreen(screen);const r=Matrix2D.identity();game.ratio>1?r.scale(1/game.ratio,1):r.scale(1,game.ratio),gfx.uniforms.uTransform.set(r),gfx.clear().drawVertices("triangles",6),gfx.useProgram(prog2).useScreen(null),gfx.uniforms.uTextureID.set(0),gfx.clear().drawVertices("triangles",6)})),game.on("resize",(e=>{gfx.viewport(0,0,...e),screen.resize(...e)}));