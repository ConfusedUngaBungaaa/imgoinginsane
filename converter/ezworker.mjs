export function createWorker(e,a){return new Promise(((t,r)=>{const s=new Worker(e,a),o=new Map,n=e=>{"ready"==e.data?.type&&(s.removeEventListener("message",n),s.remote=(e,...a)=>new Promise(((t,r)=>{let n;do{n=Array(16).fill(0).map((()=>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[Math.floor(64*Math.random())])).join("")}while(o.has(n));o.set(n,{res:t,rej:r}),s.postMessage({type:"remote-request",hash:n,functionName:e,args:a})})),s.addEventListener("message",(e=>{"remote-responce"==e.data?.type&&(e.data.error?o.get(e.data.hash).rej(e.data.error):o.get(e.data.hash).res(e.data.data),o.delete(e.data.hash))})),t(s))};s.addEventListener("message",n),s.addEventListener("error",r)}))}export function initWorker(e={}){postMessage({type:"ready"}),addEventListener("message",(async a=>{if("remote-request"!=a.data?.type)return;const t=a.data.hash;try{console.log(a.data.functionName);const r=await e[a.data.functionName](...a.data.args);postMessage({type:"remote-responce",hash:t,data:r})}catch(e){postMessage({type:"remote-responce",hash:t,error:e})}}))}